% Generated by roxygen2 (4.1.0.9001): do not edit by hand
% Please edit documentation in R/mclapply.r
\name{meffil.mclapply}
\alias{meffil.mclapply}
\title{mclapply}
\usage{
meffil.mclapply(X, FUN, ..., ret.bytes = NA, max.bytes = 2^30 - 1,
  tempdir = tempdir())
}
\arguments{
\item{X}{Same as \code{\link[parallel]{mclapply}()}:
A vector (atomic or list) or an expressions vector.
Other objects (including classed objects) will be coerced by
\code{\link{as.list}()}.}

\item{FUN}{Same as \code{\link[parallel]{mclapply}()}:
The function to be applied to each element of 'X'.}

\item{...}{Optional arguments to \code{FUN} and \code{\link[parallel]{mclapply}()}.}

\item{ret.bytes}{Number of bytes needed to store
each object returned by \code{FUN}, i.e. \code{FUN(X[[i]])}.
Number of bytes can be computed using the function \code{\link{object.size}()}.
If this value underestimates the actual memory requirements
and the returned list requires more than 2Gb of storage space,
then the function will fail with the following error message:
   Error in sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE)) :
   long vectors not supported ...}

\item{max.bytes}{The size in memory of the largest object that can
be returned by \code{\link[parallel]{mclapply}} (Default: 2Gb-1).}
}
\value{
Same as \code{\link[parallel]{mclapply}()}:
a list of the same length as 'X' and named by 'X'.
Element i is equal to \code{FUN(X[[i]])}.
}
\description{
mclapply without the 2Gb output memory bound.
}

